// Code generated by protoc-gen-go. DO NOT EDIT.
// source: elearning.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AlbumRequest struct {
	Album                *Album   `protobuf:"bytes,1,opt,name=album,proto3" json:"album,omitempty"`
	Id                   string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AlbumRequest) Reset()         { *m = AlbumRequest{} }
func (m *AlbumRequest) String() string { return proto.CompactTextString(m) }
func (*AlbumRequest) ProtoMessage()    {}
func (*AlbumRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d36dabd568887d9e, []int{0}
}

func (m *AlbumRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AlbumRequest.Unmarshal(m, b)
}
func (m *AlbumRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AlbumRequest.Marshal(b, m, deterministic)
}
func (m *AlbumRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AlbumRequest.Merge(m, src)
}
func (m *AlbumRequest) XXX_Size() int {
	return xxx_messageInfo_AlbumRequest.Size(m)
}
func (m *AlbumRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AlbumRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AlbumRequest proto.InternalMessageInfo

func (m *AlbumRequest) GetAlbum() *Album {
	if m != nil {
		return m.Album
	}
	return nil
}

func (m *AlbumRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type AlbumResponse struct {
	Album                *Album   `protobuf:"bytes,1,opt,name=album,proto3" json:"album,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AlbumResponse) Reset()         { *m = AlbumResponse{} }
func (m *AlbumResponse) String() string { return proto.CompactTextString(m) }
func (*AlbumResponse) ProtoMessage()    {}
func (*AlbumResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d36dabd568887d9e, []int{1}
}

func (m *AlbumResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AlbumResponse.Unmarshal(m, b)
}
func (m *AlbumResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AlbumResponse.Marshal(b, m, deterministic)
}
func (m *AlbumResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AlbumResponse.Merge(m, src)
}
func (m *AlbumResponse) XXX_Size() int {
	return xxx_messageInfo_AlbumResponse.Size(m)
}
func (m *AlbumResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AlbumResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AlbumResponse proto.InternalMessageInfo

func (m *AlbumResponse) GetAlbum() *Album {
	if m != nil {
		return m.Album
	}
	return nil
}

type AlbumsResponse struct {
	Albums               []*Album    `protobuf:"bytes,1,rep,name=albums,proto3" json:"albums,omitempty"`
	Pagination           *Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *AlbumsResponse) Reset()         { *m = AlbumsResponse{} }
func (m *AlbumsResponse) String() string { return proto.CompactTextString(m) }
func (*AlbumsResponse) ProtoMessage()    {}
func (*AlbumsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d36dabd568887d9e, []int{2}
}

func (m *AlbumsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AlbumsResponse.Unmarshal(m, b)
}
func (m *AlbumsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AlbumsResponse.Marshal(b, m, deterministic)
}
func (m *AlbumsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AlbumsResponse.Merge(m, src)
}
func (m *AlbumsResponse) XXX_Size() int {
	return xxx_messageInfo_AlbumsResponse.Size(m)
}
func (m *AlbumsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AlbumsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AlbumsResponse proto.InternalMessageInfo

func (m *AlbumsResponse) GetAlbums() []*Album {
	if m != nil {
		return m.Albums
	}
	return nil
}

func (m *AlbumsResponse) GetPagination() *Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type Album struct {
	Id                   uint64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt            string     `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            string     `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Title                string     `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Description          string     `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Image                string     `protobuf:"bytes,6,opt,name=image,proto3" json:"image,omitempty"`
	IsPublished          bool       `protobuf:"varint,7,opt,name=is_published,json=isPublished,proto3" json:"is_published,omitempty"`
	PublishedAt          string     `protobuf:"bytes,8,opt,name=published_at,json=publishedAt,proto3" json:"published_at,omitempty"`
	Teachers             string     `protobuf:"bytes,9,opt,name=teachers,proto3" json:"teachers,omitempty"`
	Sections             []*Section `protobuf:"bytes,10,rep,name=sections,proto3" json:"sections,omitempty"`
	Shelves              []*Shelf   `protobuf:"bytes,11,rep,name=shelves,proto3" json:"shelves,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Album) Reset()         { *m = Album{} }
func (m *Album) String() string { return proto.CompactTextString(m) }
func (*Album) ProtoMessage()    {}
func (*Album) Descriptor() ([]byte, []int) {
	return fileDescriptor_d36dabd568887d9e, []int{3}
}

func (m *Album) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Album.Unmarshal(m, b)
}
func (m *Album) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Album.Marshal(b, m, deterministic)
}
func (m *Album) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Album.Merge(m, src)
}
func (m *Album) XXX_Size() int {
	return xxx_messageInfo_Album.Size(m)
}
func (m *Album) XXX_DiscardUnknown() {
	xxx_messageInfo_Album.DiscardUnknown(m)
}

var xxx_messageInfo_Album proto.InternalMessageInfo

func (m *Album) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Album) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Album) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *Album) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Album) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Album) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *Album) GetIsPublished() bool {
	if m != nil {
		return m.IsPublished
	}
	return false
}

func (m *Album) GetPublishedAt() string {
	if m != nil {
		return m.PublishedAt
	}
	return ""
}

func (m *Album) GetTeachers() string {
	if m != nil {
		return m.Teachers
	}
	return ""
}

func (m *Album) GetSections() []*Section {
	if m != nil {
		return m.Sections
	}
	return nil
}

func (m *Album) GetShelves() []*Shelf {
	if m != nil {
		return m.Shelves
	}
	return nil
}

type Section struct {
	Id                   uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title                string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description          string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Tracks               []*Track `protobuf:"bytes,4,rep,name=tracks,proto3" json:"tracks,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Section) Reset()         { *m = Section{} }
func (m *Section) String() string { return proto.CompactTextString(m) }
func (*Section) ProtoMessage()    {}
func (*Section) Descriptor() ([]byte, []int) {
	return fileDescriptor_d36dabd568887d9e, []int{4}
}

func (m *Section) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Section.Unmarshal(m, b)
}
func (m *Section) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Section.Marshal(b, m, deterministic)
}
func (m *Section) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Section.Merge(m, src)
}
func (m *Section) XXX_Size() int {
	return xxx_messageInfo_Section.Size(m)
}
func (m *Section) XXX_DiscardUnknown() {
	xxx_messageInfo_Section.DiscardUnknown(m)
}

var xxx_messageInfo_Section proto.InternalMessageInfo

func (m *Section) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Section) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Section) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Section) GetTracks() []*Track {
	if m != nil {
		return m.Tracks
	}
	return nil
}

type TrackRequest struct {
	Track                *Track   `protobuf:"bytes,1,opt,name=track,proto3" json:"track,omitempty"`
	Id                   string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TrackRequest) Reset()         { *m = TrackRequest{} }
func (m *TrackRequest) String() string { return proto.CompactTextString(m) }
func (*TrackRequest) ProtoMessage()    {}
func (*TrackRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d36dabd568887d9e, []int{5}
}

func (m *TrackRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrackRequest.Unmarshal(m, b)
}
func (m *TrackRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrackRequest.Marshal(b, m, deterministic)
}
func (m *TrackRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrackRequest.Merge(m, src)
}
func (m *TrackRequest) XXX_Size() int {
	return xxx_messageInfo_TrackRequest.Size(m)
}
func (m *TrackRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TrackRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TrackRequest proto.InternalMessageInfo

func (m *TrackRequest) GetTrack() *Track {
	if m != nil {
		return m.Track
	}
	return nil
}

func (m *TrackRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type TrackResponse struct {
	Track                *Track   `protobuf:"bytes,1,opt,name=track,proto3" json:"track,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TrackResponse) Reset()         { *m = TrackResponse{} }
func (m *TrackResponse) String() string { return proto.CompactTextString(m) }
func (*TrackResponse) ProtoMessage()    {}
func (*TrackResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d36dabd568887d9e, []int{6}
}

func (m *TrackResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrackResponse.Unmarshal(m, b)
}
func (m *TrackResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrackResponse.Marshal(b, m, deterministic)
}
func (m *TrackResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrackResponse.Merge(m, src)
}
func (m *TrackResponse) XXX_Size() int {
	return xxx_messageInfo_TrackResponse.Size(m)
}
func (m *TrackResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TrackResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TrackResponse proto.InternalMessageInfo

func (m *TrackResponse) GetTrack() *Track {
	if m != nil {
		return m.Track
	}
	return nil
}

type TracksResponse struct {
	Tracks               []*Track    `protobuf:"bytes,1,rep,name=tracks,proto3" json:"tracks,omitempty"`
	Pagination           *Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *TracksResponse) Reset()         { *m = TracksResponse{} }
func (m *TracksResponse) String() string { return proto.CompactTextString(m) }
func (*TracksResponse) ProtoMessage()    {}
func (*TracksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d36dabd568887d9e, []int{7}
}

func (m *TracksResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TracksResponse.Unmarshal(m, b)
}
func (m *TracksResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TracksResponse.Marshal(b, m, deterministic)
}
func (m *TracksResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TracksResponse.Merge(m, src)
}
func (m *TracksResponse) XXX_Size() int {
	return xxx_messageInfo_TracksResponse.Size(m)
}
func (m *TracksResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TracksResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TracksResponse proto.InternalMessageInfo

func (m *TracksResponse) GetTracks() []*Track {
	if m != nil {
		return m.Tracks
	}
	return nil
}

func (m *TracksResponse) GetPagination() *Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type Track struct {
	Id                   uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt            string   `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            string   `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Title                string   `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Description          string   `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Duration             int64    `protobuf:"varint,6,opt,name=duration,proto3" json:"duration,omitempty"`
	Media                string   `protobuf:"bytes,7,opt,name=media,proto3" json:"media,omitempty"`
	Teachers             string   `protobuf:"bytes,8,opt,name=teachers,proto3" json:"teachers,omitempty"`
	Albums               []*Album `protobuf:"bytes,9,rep,name=albums,proto3" json:"albums,omitempty"`
	Subject              *Subject `protobuf:"bytes,10,opt,name=subject,proto3" json:"subject,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Track) Reset()         { *m = Track{} }
func (m *Track) String() string { return proto.CompactTextString(m) }
func (*Track) ProtoMessage()    {}
func (*Track) Descriptor() ([]byte, []int) {
	return fileDescriptor_d36dabd568887d9e, []int{8}
}

func (m *Track) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Track.Unmarshal(m, b)
}
func (m *Track) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Track.Marshal(b, m, deterministic)
}
func (m *Track) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Track.Merge(m, src)
}
func (m *Track) XXX_Size() int {
	return xxx_messageInfo_Track.Size(m)
}
func (m *Track) XXX_DiscardUnknown() {
	xxx_messageInfo_Track.DiscardUnknown(m)
}

var xxx_messageInfo_Track proto.InternalMessageInfo

func (m *Track) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Track) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Track) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *Track) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Track) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Track) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *Track) GetMedia() string {
	if m != nil {
		return m.Media
	}
	return ""
}

func (m *Track) GetTeachers() string {
	if m != nil {
		return m.Teachers
	}
	return ""
}

func (m *Track) GetAlbums() []*Album {
	if m != nil {
		return m.Albums
	}
	return nil
}

func (m *Track) GetSubject() *Subject {
	if m != nil {
		return m.Subject
	}
	return nil
}

type ShelfRequest struct {
	Shelf                *Shelf   `protobuf:"bytes,1,opt,name=shelf,proto3" json:"shelf,omitempty"`
	Id                   string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShelfRequest) Reset()         { *m = ShelfRequest{} }
func (m *ShelfRequest) String() string { return proto.CompactTextString(m) }
func (*ShelfRequest) ProtoMessage()    {}
func (*ShelfRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d36dabd568887d9e, []int{9}
}

func (m *ShelfRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ShelfRequest.Unmarshal(m, b)
}
func (m *ShelfRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ShelfRequest.Marshal(b, m, deterministic)
}
func (m *ShelfRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShelfRequest.Merge(m, src)
}
func (m *ShelfRequest) XXX_Size() int {
	return xxx_messageInfo_ShelfRequest.Size(m)
}
func (m *ShelfRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ShelfRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ShelfRequest proto.InternalMessageInfo

func (m *ShelfRequest) GetShelf() *Shelf {
	if m != nil {
		return m.Shelf
	}
	return nil
}

func (m *ShelfRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ShelfResponse struct {
	Shelf                *Shelf   `protobuf:"bytes,1,opt,name=shelf,proto3" json:"shelf,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShelfResponse) Reset()         { *m = ShelfResponse{} }
func (m *ShelfResponse) String() string { return proto.CompactTextString(m) }
func (*ShelfResponse) ProtoMessage()    {}
func (*ShelfResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d36dabd568887d9e, []int{10}
}

func (m *ShelfResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ShelfResponse.Unmarshal(m, b)
}
func (m *ShelfResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ShelfResponse.Marshal(b, m, deterministic)
}
func (m *ShelfResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShelfResponse.Merge(m, src)
}
func (m *ShelfResponse) XXX_Size() int {
	return xxx_messageInfo_ShelfResponse.Size(m)
}
func (m *ShelfResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ShelfResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ShelfResponse proto.InternalMessageInfo

func (m *ShelfResponse) GetShelf() *Shelf {
	if m != nil {
		return m.Shelf
	}
	return nil
}

type ShelvesResponse struct {
	Shelves              []*Shelf    `protobuf:"bytes,1,rep,name=shelves,proto3" json:"shelves,omitempty"`
	Pagination           *Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ShelvesResponse) Reset()         { *m = ShelvesResponse{} }
func (m *ShelvesResponse) String() string { return proto.CompactTextString(m) }
func (*ShelvesResponse) ProtoMessage()    {}
func (*ShelvesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d36dabd568887d9e, []int{11}
}

func (m *ShelvesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ShelvesResponse.Unmarshal(m, b)
}
func (m *ShelvesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ShelvesResponse.Marshal(b, m, deterministic)
}
func (m *ShelvesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShelvesResponse.Merge(m, src)
}
func (m *ShelvesResponse) XXX_Size() int {
	return xxx_messageInfo_ShelvesResponse.Size(m)
}
func (m *ShelvesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ShelvesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ShelvesResponse proto.InternalMessageInfo

func (m *ShelvesResponse) GetShelves() []*Shelf {
	if m != nil {
		return m.Shelves
	}
	return nil
}

func (m *ShelvesResponse) GetPagination() *Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type Shelf struct {
	Id                   uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt            string   `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            string   `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Title                string   `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Albums               []*Album `protobuf:"bytes,5,rep,name=albums,proto3" json:"albums,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Shelf) Reset()         { *m = Shelf{} }
func (m *Shelf) String() string { return proto.CompactTextString(m) }
func (*Shelf) ProtoMessage()    {}
func (*Shelf) Descriptor() ([]byte, []int) {
	return fileDescriptor_d36dabd568887d9e, []int{12}
}

func (m *Shelf) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Shelf.Unmarshal(m, b)
}
func (m *Shelf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Shelf.Marshal(b, m, deterministic)
}
func (m *Shelf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Shelf.Merge(m, src)
}
func (m *Shelf) XXX_Size() int {
	return xxx_messageInfo_Shelf.Size(m)
}
func (m *Shelf) XXX_DiscardUnknown() {
	xxx_messageInfo_Shelf.DiscardUnknown(m)
}

var xxx_messageInfo_Shelf proto.InternalMessageInfo

func (m *Shelf) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Shelf) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Shelf) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *Shelf) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Shelf) GetAlbums() []*Album {
	if m != nil {
		return m.Albums
	}
	return nil
}

type Preference struct {
	Type                 string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Content              string   `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Preference) Reset()         { *m = Preference{} }
func (m *Preference) String() string { return proto.CompactTextString(m) }
func (*Preference) ProtoMessage()    {}
func (*Preference) Descriptor() ([]byte, []int) {
	return fileDescriptor_d36dabd568887d9e, []int{13}
}

func (m *Preference) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Preference.Unmarshal(m, b)
}
func (m *Preference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Preference.Marshal(b, m, deterministic)
}
func (m *Preference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Preference.Merge(m, src)
}
func (m *Preference) XXX_Size() int {
	return xxx_messageInfo_Preference.Size(m)
}
func (m *Preference) XXX_DiscardUnknown() {
	xxx_messageInfo_Preference.DiscardUnknown(m)
}

var xxx_messageInfo_Preference proto.InternalMessageInfo

func (m *Preference) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Preference) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type PreferenceRequest struct {
	Preference           *Preference `protobuf:"bytes,1,opt,name=preference,proto3" json:"preference,omitempty"`
	Id                   string      `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *PreferenceRequest) Reset()         { *m = PreferenceRequest{} }
func (m *PreferenceRequest) String() string { return proto.CompactTextString(m) }
func (*PreferenceRequest) ProtoMessage()    {}
func (*PreferenceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d36dabd568887d9e, []int{14}
}

func (m *PreferenceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PreferenceRequest.Unmarshal(m, b)
}
func (m *PreferenceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PreferenceRequest.Marshal(b, m, deterministic)
}
func (m *PreferenceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PreferenceRequest.Merge(m, src)
}
func (m *PreferenceRequest) XXX_Size() int {
	return xxx_messageInfo_PreferenceRequest.Size(m)
}
func (m *PreferenceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PreferenceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PreferenceRequest proto.InternalMessageInfo

func (m *PreferenceRequest) GetPreference() *Preference {
	if m != nil {
		return m.Preference
	}
	return nil
}

func (m *PreferenceRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type PreferenceResponse struct {
	Preference           *Preference `protobuf:"bytes,1,opt,name=preference,proto3" json:"preference,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *PreferenceResponse) Reset()         { *m = PreferenceResponse{} }
func (m *PreferenceResponse) String() string { return proto.CompactTextString(m) }
func (*PreferenceResponse) ProtoMessage()    {}
func (*PreferenceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d36dabd568887d9e, []int{15}
}

func (m *PreferenceResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PreferenceResponse.Unmarshal(m, b)
}
func (m *PreferenceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PreferenceResponse.Marshal(b, m, deterministic)
}
func (m *PreferenceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PreferenceResponse.Merge(m, src)
}
func (m *PreferenceResponse) XXX_Size() int {
	return xxx_messageInfo_PreferenceResponse.Size(m)
}
func (m *PreferenceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PreferenceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PreferenceResponse proto.InternalMessageInfo

func (m *PreferenceResponse) GetPreference() *Preference {
	if m != nil {
		return m.Preference
	}
	return nil
}

type SubjectRequest struct {
	Subject              *Subject `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	Id                   string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubjectRequest) Reset()         { *m = SubjectRequest{} }
func (m *SubjectRequest) String() string { return proto.CompactTextString(m) }
func (*SubjectRequest) ProtoMessage()    {}
func (*SubjectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d36dabd568887d9e, []int{16}
}

func (m *SubjectRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubjectRequest.Unmarshal(m, b)
}
func (m *SubjectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubjectRequest.Marshal(b, m, deterministic)
}
func (m *SubjectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubjectRequest.Merge(m, src)
}
func (m *SubjectRequest) XXX_Size() int {
	return xxx_messageInfo_SubjectRequest.Size(m)
}
func (m *SubjectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubjectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubjectRequest proto.InternalMessageInfo

func (m *SubjectRequest) GetSubject() *Subject {
	if m != nil {
		return m.Subject
	}
	return nil
}

func (m *SubjectRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type SubjectResponse struct {
	Subject              *Subject `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubjectResponse) Reset()         { *m = SubjectResponse{} }
func (m *SubjectResponse) String() string { return proto.CompactTextString(m) }
func (*SubjectResponse) ProtoMessage()    {}
func (*SubjectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d36dabd568887d9e, []int{17}
}

func (m *SubjectResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubjectResponse.Unmarshal(m, b)
}
func (m *SubjectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubjectResponse.Marshal(b, m, deterministic)
}
func (m *SubjectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubjectResponse.Merge(m, src)
}
func (m *SubjectResponse) XXX_Size() int {
	return xxx_messageInfo_SubjectResponse.Size(m)
}
func (m *SubjectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SubjectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SubjectResponse proto.InternalMessageInfo

func (m *SubjectResponse) GetSubject() *Subject {
	if m != nil {
		return m.Subject
	}
	return nil
}

type SubjectsResponse struct {
	Subjects             []*Subject  `protobuf:"bytes,1,rep,name=subjects,proto3" json:"subjects,omitempty"`
	Pagination           *Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *SubjectsResponse) Reset()         { *m = SubjectsResponse{} }
func (m *SubjectsResponse) String() string { return proto.CompactTextString(m) }
func (*SubjectsResponse) ProtoMessage()    {}
func (*SubjectsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d36dabd568887d9e, []int{18}
}

func (m *SubjectsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubjectsResponse.Unmarshal(m, b)
}
func (m *SubjectsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubjectsResponse.Marshal(b, m, deterministic)
}
func (m *SubjectsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubjectsResponse.Merge(m, src)
}
func (m *SubjectsResponse) XXX_Size() int {
	return xxx_messageInfo_SubjectsResponse.Size(m)
}
func (m *SubjectsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SubjectsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SubjectsResponse proto.InternalMessageInfo

func (m *SubjectsResponse) GetSubjects() []*Subject {
	if m != nil {
		return m.Subjects
	}
	return nil
}

func (m *SubjectsResponse) GetPagination() *Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type Subject struct {
	Id                   uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt            string   `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            string   `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Title                string   `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Subject) Reset()         { *m = Subject{} }
func (m *Subject) String() string { return proto.CompactTextString(m) }
func (*Subject) ProtoMessage()    {}
func (*Subject) Descriptor() ([]byte, []int) {
	return fileDescriptor_d36dabd568887d9e, []int{19}
}

func (m *Subject) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Subject.Unmarshal(m, b)
}
func (m *Subject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Subject.Marshal(b, m, deterministic)
}
func (m *Subject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Subject.Merge(m, src)
}
func (m *Subject) XXX_Size() int {
	return xxx_messageInfo_Subject.Size(m)
}
func (m *Subject) XXX_DiscardUnknown() {
	xxx_messageInfo_Subject.DiscardUnknown(m)
}

var xxx_messageInfo_Subject proto.InternalMessageInfo

func (m *Subject) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Subject) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Subject) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *Subject) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func init() {
	proto.RegisterType((*AlbumRequest)(nil), "elearning.AlbumRequest")
	proto.RegisterType((*AlbumResponse)(nil), "elearning.AlbumResponse")
	proto.RegisterType((*AlbumsResponse)(nil), "elearning.AlbumsResponse")
	proto.RegisterType((*Album)(nil), "elearning.Album")
	proto.RegisterType((*Section)(nil), "elearning.Section")
	proto.RegisterType((*TrackRequest)(nil), "elearning.TrackRequest")
	proto.RegisterType((*TrackResponse)(nil), "elearning.TrackResponse")
	proto.RegisterType((*TracksResponse)(nil), "elearning.TracksResponse")
	proto.RegisterType((*Track)(nil), "elearning.Track")
	proto.RegisterType((*ShelfRequest)(nil), "elearning.ShelfRequest")
	proto.RegisterType((*ShelfResponse)(nil), "elearning.ShelfResponse")
	proto.RegisterType((*ShelvesResponse)(nil), "elearning.ShelvesResponse")
	proto.RegisterType((*Shelf)(nil), "elearning.Shelf")
	proto.RegisterType((*Preference)(nil), "elearning.Preference")
	proto.RegisterType((*PreferenceRequest)(nil), "elearning.PreferenceRequest")
	proto.RegisterType((*PreferenceResponse)(nil), "elearning.PreferenceResponse")
	proto.RegisterType((*SubjectRequest)(nil), "elearning.SubjectRequest")
	proto.RegisterType((*SubjectResponse)(nil), "elearning.SubjectResponse")
	proto.RegisterType((*SubjectsResponse)(nil), "elearning.SubjectsResponse")
	proto.RegisterType((*Subject)(nil), "elearning.Subject")
}

func init() { proto.RegisterFile("elearning.proto", fileDescriptor_d36dabd568887d9e) }

var fileDescriptor_d36dabd568887d9e = []byte{
	// 924 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x57, 0xdd, 0x8e, 0xdb, 0x44,
	0x14, 0xae, 0x9d, 0x4d, 0x1c, 0x9f, 0x2c, 0xbb, 0x65, 0x44, 0x85, 0x1b, 0xa8, 0x14, 0x7c, 0x81,
	0x22, 0x84, 0xf6, 0xc2, 0x08, 0x21, 0x21, 0x95, 0x92, 0x82, 0x00, 0x09, 0x01, 0x2b, 0xa7, 0xbd,
	0xa9, 0x90, 0x2a, 0xaf, 0x7d, 0x76, 0x63, 0x70, 0x6c, 0xd7, 0xe3, 0xac, 0x84, 0x78, 0x0e, 0x9e,
	0x84, 0xb7, 0x00, 0x9e, 0x01, 0x89, 0x37, 0x41, 0xf3, 0xe3, 0xf1, 0x78, 0xed, 0x64, 0x13, 0xaf,
	0xaa, 0x5e, 0xed, 0xce, 0x7c, 0xe7, 0x7c, 0x3e, 0xe7, 0x3b, 0x9f, 0x3d, 0x13, 0x38, 0xc5, 0x04,
	0x83, 0x22, 0x8d, 0xd3, 0xab, 0xb3, 0xbc, 0xc8, 0xca, 0x8c, 0xd8, 0x6a, 0x63, 0x7a, 0x1c, 0x66,
	0xeb, 0x75, 0x96, 0x0a, 0xc0, 0xfd, 0x06, 0x8e, 0x17, 0xc9, 0xc5, 0x66, 0xed, 0xe3, 0xab, 0x0d,
	0xd2, 0x92, 0x7c, 0x08, 0xc3, 0x80, 0xad, 0x1d, 0x63, 0x66, 0xcc, 0x27, 0xde, 0xfd, 0xb3, 0x9a,
	0x49, 0xc4, 0x09, 0x98, 0x9c, 0x80, 0x19, 0x47, 0x8e, 0x39, 0x33, 0xe6, 0xb6, 0x6f, 0xc6, 0x91,
	0xfb, 0x19, 0xbc, 0x25, 0x79, 0x68, 0x9e, 0xa5, 0x14, 0xf7, 0x25, 0x72, 0x53, 0x38, 0xe1, 0x6b,
	0xaa, 0x32, 0xe7, 0x30, 0xe2, 0x10, 0x75, 0x8c, 0xd9, 0xa0, 0x33, 0x55, 0xe2, 0xc4, 0x03, 0xc8,
	0x83, 0xab, 0x38, 0x0d, 0xca, 0x38, 0x4b, 0x79, 0x31, 0x13, 0x8f, 0x9c, 0xc9, 0xfe, 0xce, 0x15,
	0xe2, 0x6b, 0x51, 0xee, 0x7f, 0x26, 0x0c, 0x17, 0x5a, 0x0b, 0xac, 0xbc, 0x23, 0xd6, 0x02, 0x79,
	0x04, 0x10, 0x16, 0x18, 0x94, 0x18, 0xbd, 0x0c, 0x4a, 0xd9, 0x9a, 0x2d, 0x77, 0x16, 0x25, 0x83,
	0x37, 0x79, 0x54, 0xc1, 0x03, 0x01, 0xcb, 0x9d, 0x45, 0x49, 0xde, 0x81, 0x61, 0x19, 0x97, 0x09,
	0x3a, 0x47, 0x1c, 0x11, 0x0b, 0x32, 0x83, 0x49, 0x84, 0x34, 0x2c, 0xe2, 0x9c, 0x97, 0x38, 0xe4,
	0x98, 0xbe, 0xc5, 0xf2, 0xe2, 0x75, 0x70, 0x85, 0xce, 0x48, 0xe4, 0xf1, 0x05, 0xf9, 0x00, 0x8e,
	0x63, 0xfa, 0x32, 0xdf, 0x5c, 0x24, 0x31, 0x5d, 0x61, 0xe4, 0x58, 0x33, 0x63, 0x3e, 0xf6, 0x27,
	0x31, 0x3d, 0xaf, 0xb6, 0x58, 0x88, 0xc2, 0x59, 0x45, 0x63, 0xc1, 0xad, 0xf6, 0x16, 0x25, 0x99,
	0xc2, 0xb8, 0xc4, 0x20, 0x5c, 0x61, 0x41, 0x1d, 0x9b, 0xc3, 0x6a, 0x4d, 0xce, 0x60, 0x4c, 0x31,
	0x64, 0x25, 0x50, 0x07, 0xb8, 0xce, 0x44, 0xd3, 0x79, 0x29, 0x20, 0x5f, 0xc5, 0x90, 0x8f, 0xc0,
	0xa2, 0x2b, 0x4c, 0xae, 0x91, 0x3a, 0x93, 0xd6, 0x58, 0x96, 0x2b, 0x4c, 0x2e, 0xfd, 0x2a, 0xc0,
	0xfd, 0x1d, 0x2c, 0x49, 0xd0, 0x12, 0x59, 0xc9, 0x64, 0xee, 0x90, 0x69, 0xd0, 0x96, 0x69, 0x0e,
	0xa3, 0xb2, 0x08, 0xc2, 0x5f, 0xa9, 0x73, 0xd4, 0x7a, 0xfa, 0x33, 0x06, 0xf8, 0x12, 0x67, 0x8e,
	0x16, 0x1b, 0xb5, 0xa3, 0x39, 0xd2, 0x61, 0x44, 0x11, 0x27, 0xe0, 0x2e, 0x47, 0x4b, 0x9e, 0xda,
	0xd1, 0xfb, 0x10, 0x31, 0x47, 0xf3, 0x75, 0xc3, 0xd1, 0xb2, 0x78, 0x63, 0x77, 0xf1, 0xbd, 0x1c,
	0xfd, 0xa7, 0x09, 0xc3, 0x67, 0x5a, 0x0b, 0x6f, 0xda, 0xd1, 0x53, 0x18, 0x47, 0x9b, 0x42, 0x74,
	0xc0, 0x4c, 0x3d, 0xf0, 0xd5, 0x9a, 0x71, 0xae, 0x31, 0x8a, 0x03, 0x6e, 0x68, 0xdb, 0x17, 0x8b,
	0x86, 0x4f, 0xc7, 0x37, 0x7c, 0x5a, 0x7f, 0x0d, 0xec, 0x5b, 0xbe, 0x06, 0x1f, 0x83, 0x45, 0x37,
	0x17, 0xbf, 0x60, 0x58, 0x3a, 0x20, 0x85, 0xd3, 0x1c, 0x2a, 0x10, 0xbf, 0x0a, 0x61, 0x36, 0x11,
	0xae, 0xad, 0x6d, 0xc2, 0xec, 0x7b, 0xd9, 0x31, 0x5d, 0x11, 0x27, 0xe0, 0x2e, 0x9b, 0x48, 0x9e,
	0xda, 0x26, 0xfb, 0x10, 0xb9, 0xaf, 0xe0, 0x74, 0x29, 0xde, 0x17, 0x95, 0xaa, 0xbd, 0x63, 0xc6,
	0x2d, 0xef, 0x58, 0x2f, 0xa7, 0xfc, 0x61, 0xc0, 0x70, 0xa9, 0x75, 0xf1, 0x7a, 0x9d, 0x52, 0x4f,
	0x6e, 0xb8, 0x7b, 0x72, 0xee, 0xe7, 0x00, 0xe7, 0x05, 0x5e, 0x62, 0x81, 0x69, 0x88, 0x84, 0xc0,
	0x51, 0xf9, 0x5b, 0x8e, 0xbc, 0x3a, 0xdb, 0xe7, 0xff, 0x13, 0x07, 0xac, 0x30, 0x4b, 0x4b, 0x4c,
	0xab, 0xe2, 0xaa, 0xa5, 0xfb, 0x02, 0xde, 0xae, 0x73, 0xab, 0x61, 0x7e, 0x0a, 0x90, 0xab, 0x4d,
	0x39, 0x88, 0x07, 0xda, 0xe3, 0xb5, 0x0c, 0x2d, 0x50, 0xaa, 0x32, 0x50, 0xb3, 0xfd, 0x1e, 0x88,
	0xce, 0x2d, 0xa7, 0xd4, 0x8f, 0xdc, 0xfd, 0x11, 0x4e, 0x2a, 0x13, 0xca, 0x2a, 0x35, 0xc3, 0x1a,
	0xb7, 0x1a, 0xb6, 0x65, 0xbc, 0x27, 0x70, 0xaa, 0xf8, 0x64, 0x65, 0x07, 0x11, 0xba, 0xd7, 0x70,
	0x5f, 0xee, 0xd5, 0x0e, 0x64, 0xa7, 0x82, 0xdc, 0x93, 0x16, 0xec, 0xa2, 0x50, 0x31, 0xbd, 0x5c,
	0xb8, 0x06, 0x6b, 0xd9, 0xe8, 0xe9, 0xb5, 0xda, 0xd0, 0xfb, 0x67, 0x20, 0xaf, 0x38, 0x4b, 0x2c,
	0xae, 0xe3, 0x10, 0xc9, 0x63, 0x18, 0x7d, 0xc5, 0x29, 0xc9, 0xbb, 0x2d, 0x47, 0x8a, 0xc9, 0x4c,
	0x9d, 0x36, 0x20, 0x04, 0x72, 0xef, 0x91, 0x2f, 0xc0, 0xf2, 0x31, 0x88, 0x7e, 0x4a, 0x7b, 0xe6,
	0x3f, 0x16, 0xf9, 0x8b, 0x24, 0x21, 0x0f, 0x2a, 0xa5, 0x96, 0x18, 0x14, 0xe1, 0xaa, 0xca, 0x7e,
	0x78, 0x33, 0x9b, 0x36, 0xd2, 0x47, 0xcf, 0x79, 0xc7, 0x7d, 0x9f, 0x3e, 0xfa, 0x1a, 0x13, 0xbc,
	0x43, 0xf3, 0xf2, 0x06, 0xd2, 0x2f, 0xff, 0x4b, 0xb0, 0x9f, 0xa7, 0xf9, 0x1d, 0x18, 0xbc, 0xbf,
	0x4c, 0x79, 0xbe, 0xef, 0x1e, 0xa7, 0x7e, 0x05, 0x68, 0xf0, 0x35, 0xce, 0xf4, 0xed, 0xe3, 0xdc,
	0x3b, 0xff, 0xb0, 0x71, 0x36, 0x2f, 0x06, 0x5b, 0xc7, 0x79, 0xc0, 0xd3, 0xbb, 0xc6, 0xb9, 0x6f,
	0xba, 0xf7, 0xb7, 0x29, 0x4f, 0xc1, 0xdd, 0x62, 0xea, 0x07, 0x65, 0x83, 0xaf, 0x71, 0xf2, 0x6d,
	0x17, 0xf3, 0xd0, 0xfc, 0x1d, 0x62, 0x4e, 0x6f, 0x64, 0x6b, 0xc7, 0xe7, 0x56, 0x35, 0xf7, 0x7e,
	0x7c, 0xb7, 0x9a, 0xfb, 0xa6, 0x7b, 0xff, 0x9a, 0xea, 0x13, 0x5f, 0xe9, 0xb9, 0x50, 0x7a, 0x3e,
	0xec, 0xf8, 0x8e, 0x76, 0xf5, 0xd4, 0xfc, 0xa4, 0xbb, 0xf7, 0x18, 0x85, 0xec, 0xa9, 0x37, 0xc5,
	0xd3, 0x7a, 0x2c, 0xbd, 0x39, 0x9e, 0xdc, 0x3a, 0x9a, 0xf7, 0xda, 0xf9, 0xb4, 0xd9, 0x87, 0x14,
	0xb7, 0x6f, 0x0d, 0xde, 0x0f, 0x30, 0xf9, 0x2e, 0x5b, 0x63, 0x25, 0xee, 0x1d, 0xdd, 0xe2, 0xfd,
	0xac, 0x5f, 0x1d, 0x2a, 0xd2, 0x6f, 0x95, 0xdc, 0xef, 0x77, 0x9f, 0xe9, 0x92, 0xfa, 0xd1, 0x16,
	0xb4, 0x62, 0x7f, 0x6a, 0xbd, 0x18, 0xf2, 0x9f, 0xd8, 0x17, 0x23, 0xfe, 0xe7, 0x93, 0xff, 0x03,
	0x00, 0x00, 0xff, 0xff, 0x43, 0x69, 0x6e, 0x20, 0x95, 0x0f, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AlbumServiceClient is the client API for AlbumService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AlbumServiceClient interface {
	Create(ctx context.Context, in *AlbumRequest, opts ...grpc.CallOption) (*AlbumResponse, error)
	ReadOne(ctx context.Context, in *AlbumRequest, opts ...grpc.CallOption) (*AlbumResponse, error)
	ReadAll(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*AlbumsResponse, error)
	Update(ctx context.Context, in *AlbumRequest, opts ...grpc.CallOption) (*AlbumResponse, error)
	Delete(ctx context.Context, in *AlbumRequest, opts ...grpc.CallOption) (*AlbumResponse, error)
	Publish(ctx context.Context, in *AlbumRequest, opts ...grpc.CallOption) (*AlbumResponse, error)
	Unpublish(ctx context.Context, in *AlbumRequest, opts ...grpc.CallOption) (*AlbumResponse, error)
}

type albumServiceClient struct {
	cc *grpc.ClientConn
}

func NewAlbumServiceClient(cc *grpc.ClientConn) AlbumServiceClient {
	return &albumServiceClient{cc}
}

func (c *albumServiceClient) Create(ctx context.Context, in *AlbumRequest, opts ...grpc.CallOption) (*AlbumResponse, error) {
	out := new(AlbumResponse)
	err := c.cc.Invoke(ctx, "/elearning.AlbumService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumServiceClient) ReadOne(ctx context.Context, in *AlbumRequest, opts ...grpc.CallOption) (*AlbumResponse, error) {
	out := new(AlbumResponse)
	err := c.cc.Invoke(ctx, "/elearning.AlbumService/ReadOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumServiceClient) ReadAll(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*AlbumsResponse, error) {
	out := new(AlbumsResponse)
	err := c.cc.Invoke(ctx, "/elearning.AlbumService/ReadAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumServiceClient) Update(ctx context.Context, in *AlbumRequest, opts ...grpc.CallOption) (*AlbumResponse, error) {
	out := new(AlbumResponse)
	err := c.cc.Invoke(ctx, "/elearning.AlbumService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumServiceClient) Delete(ctx context.Context, in *AlbumRequest, opts ...grpc.CallOption) (*AlbumResponse, error) {
	out := new(AlbumResponse)
	err := c.cc.Invoke(ctx, "/elearning.AlbumService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumServiceClient) Publish(ctx context.Context, in *AlbumRequest, opts ...grpc.CallOption) (*AlbumResponse, error) {
	out := new(AlbumResponse)
	err := c.cc.Invoke(ctx, "/elearning.AlbumService/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumServiceClient) Unpublish(ctx context.Context, in *AlbumRequest, opts ...grpc.CallOption) (*AlbumResponse, error) {
	out := new(AlbumResponse)
	err := c.cc.Invoke(ctx, "/elearning.AlbumService/Unpublish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AlbumServiceServer is the server API for AlbumService service.
type AlbumServiceServer interface {
	Create(context.Context, *AlbumRequest) (*AlbumResponse, error)
	ReadOne(context.Context, *AlbumRequest) (*AlbumResponse, error)
	ReadAll(context.Context, *SearchRequest) (*AlbumsResponse, error)
	Update(context.Context, *AlbumRequest) (*AlbumResponse, error)
	Delete(context.Context, *AlbumRequest) (*AlbumResponse, error)
	Publish(context.Context, *AlbumRequest) (*AlbumResponse, error)
	Unpublish(context.Context, *AlbumRequest) (*AlbumResponse, error)
}

func RegisterAlbumServiceServer(s *grpc.Server, srv AlbumServiceServer) {
	s.RegisterService(&_AlbumService_serviceDesc, srv)
}

func _AlbumService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlbumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elearning.AlbumService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumServiceServer).Create(ctx, req.(*AlbumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlbumService_ReadOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlbumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumServiceServer).ReadOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elearning.AlbumService/ReadOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumServiceServer).ReadOne(ctx, req.(*AlbumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlbumService_ReadAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumServiceServer).ReadAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elearning.AlbumService/ReadAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumServiceServer).ReadAll(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlbumService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlbumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elearning.AlbumService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumServiceServer).Update(ctx, req.(*AlbumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlbumService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlbumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elearning.AlbumService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumServiceServer).Delete(ctx, req.(*AlbumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlbumService_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlbumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumServiceServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elearning.AlbumService/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumServiceServer).Publish(ctx, req.(*AlbumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlbumService_Unpublish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlbumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumServiceServer).Unpublish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elearning.AlbumService/Unpublish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumServiceServer).Unpublish(ctx, req.(*AlbumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AlbumService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "elearning.AlbumService",
	HandlerType: (*AlbumServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _AlbumService_Create_Handler,
		},
		{
			MethodName: "ReadOne",
			Handler:    _AlbumService_ReadOne_Handler,
		},
		{
			MethodName: "ReadAll",
			Handler:    _AlbumService_ReadAll_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _AlbumService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AlbumService_Delete_Handler,
		},
		{
			MethodName: "Publish",
			Handler:    _AlbumService_Publish_Handler,
		},
		{
			MethodName: "Unpublish",
			Handler:    _AlbumService_Unpublish_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "elearning.proto",
}

// TrackServiceClient is the client API for TrackService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TrackServiceClient interface {
	Create(ctx context.Context, in *TrackRequest, opts ...grpc.CallOption) (*TrackResponse, error)
	ReadOne(ctx context.Context, in *TrackRequest, opts ...grpc.CallOption) (*TrackResponse, error)
	ReadAll(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*TracksResponse, error)
	Update(ctx context.Context, in *TrackRequest, opts ...grpc.CallOption) (*TrackResponse, error)
	Delete(ctx context.Context, in *TrackRequest, opts ...grpc.CallOption) (*TrackResponse, error)
}

type trackServiceClient struct {
	cc *grpc.ClientConn
}

func NewTrackServiceClient(cc *grpc.ClientConn) TrackServiceClient {
	return &trackServiceClient{cc}
}

func (c *trackServiceClient) Create(ctx context.Context, in *TrackRequest, opts ...grpc.CallOption) (*TrackResponse, error) {
	out := new(TrackResponse)
	err := c.cc.Invoke(ctx, "/elearning.TrackService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackServiceClient) ReadOne(ctx context.Context, in *TrackRequest, opts ...grpc.CallOption) (*TrackResponse, error) {
	out := new(TrackResponse)
	err := c.cc.Invoke(ctx, "/elearning.TrackService/ReadOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackServiceClient) ReadAll(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*TracksResponse, error) {
	out := new(TracksResponse)
	err := c.cc.Invoke(ctx, "/elearning.TrackService/ReadAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackServiceClient) Update(ctx context.Context, in *TrackRequest, opts ...grpc.CallOption) (*TrackResponse, error) {
	out := new(TrackResponse)
	err := c.cc.Invoke(ctx, "/elearning.TrackService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackServiceClient) Delete(ctx context.Context, in *TrackRequest, opts ...grpc.CallOption) (*TrackResponse, error) {
	out := new(TrackResponse)
	err := c.cc.Invoke(ctx, "/elearning.TrackService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrackServiceServer is the server API for TrackService service.
type TrackServiceServer interface {
	Create(context.Context, *TrackRequest) (*TrackResponse, error)
	ReadOne(context.Context, *TrackRequest) (*TrackResponse, error)
	ReadAll(context.Context, *SearchRequest) (*TracksResponse, error)
	Update(context.Context, *TrackRequest) (*TrackResponse, error)
	Delete(context.Context, *TrackRequest) (*TrackResponse, error)
}

func RegisterTrackServiceServer(s *grpc.Server, srv TrackServiceServer) {
	s.RegisterService(&_TrackService_serviceDesc, srv)
}

func _TrackService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elearning.TrackService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackServiceServer).Create(ctx, req.(*TrackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackService_ReadOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackServiceServer).ReadOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elearning.TrackService/ReadOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackServiceServer).ReadOne(ctx, req.(*TrackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackService_ReadAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackServiceServer).ReadAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elearning.TrackService/ReadAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackServiceServer).ReadAll(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elearning.TrackService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackServiceServer).Update(ctx, req.(*TrackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elearning.TrackService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackServiceServer).Delete(ctx, req.(*TrackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TrackService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "elearning.TrackService",
	HandlerType: (*TrackServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _TrackService_Create_Handler,
		},
		{
			MethodName: "ReadOne",
			Handler:    _TrackService_ReadOne_Handler,
		},
		{
			MethodName: "ReadAll",
			Handler:    _TrackService_ReadAll_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _TrackService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _TrackService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "elearning.proto",
}

// ShelfServiceClient is the client API for ShelfService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ShelfServiceClient interface {
	Create(ctx context.Context, in *ShelfRequest, opts ...grpc.CallOption) (*ShelfResponse, error)
	ReadOne(ctx context.Context, in *ShelfRequest, opts ...grpc.CallOption) (*ShelfResponse, error)
	ReadAll(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*ShelvesResponse, error)
	Update(ctx context.Context, in *ShelfRequest, opts ...grpc.CallOption) (*ShelfResponse, error)
	Delete(ctx context.Context, in *ShelfRequest, opts ...grpc.CallOption) (*ShelfResponse, error)
}

type shelfServiceClient struct {
	cc *grpc.ClientConn
}

func NewShelfServiceClient(cc *grpc.ClientConn) ShelfServiceClient {
	return &shelfServiceClient{cc}
}

func (c *shelfServiceClient) Create(ctx context.Context, in *ShelfRequest, opts ...grpc.CallOption) (*ShelfResponse, error) {
	out := new(ShelfResponse)
	err := c.cc.Invoke(ctx, "/elearning.ShelfService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shelfServiceClient) ReadOne(ctx context.Context, in *ShelfRequest, opts ...grpc.CallOption) (*ShelfResponse, error) {
	out := new(ShelfResponse)
	err := c.cc.Invoke(ctx, "/elearning.ShelfService/ReadOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shelfServiceClient) ReadAll(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*ShelvesResponse, error) {
	out := new(ShelvesResponse)
	err := c.cc.Invoke(ctx, "/elearning.ShelfService/ReadAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shelfServiceClient) Update(ctx context.Context, in *ShelfRequest, opts ...grpc.CallOption) (*ShelfResponse, error) {
	out := new(ShelfResponse)
	err := c.cc.Invoke(ctx, "/elearning.ShelfService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shelfServiceClient) Delete(ctx context.Context, in *ShelfRequest, opts ...grpc.CallOption) (*ShelfResponse, error) {
	out := new(ShelfResponse)
	err := c.cc.Invoke(ctx, "/elearning.ShelfService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShelfServiceServer is the server API for ShelfService service.
type ShelfServiceServer interface {
	Create(context.Context, *ShelfRequest) (*ShelfResponse, error)
	ReadOne(context.Context, *ShelfRequest) (*ShelfResponse, error)
	ReadAll(context.Context, *SearchRequest) (*ShelvesResponse, error)
	Update(context.Context, *ShelfRequest) (*ShelfResponse, error)
	Delete(context.Context, *ShelfRequest) (*ShelfResponse, error)
}

func RegisterShelfServiceServer(s *grpc.Server, srv ShelfServiceServer) {
	s.RegisterService(&_ShelfService_serviceDesc, srv)
}

func _ShelfService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShelfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShelfServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elearning.ShelfService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShelfServiceServer).Create(ctx, req.(*ShelfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShelfService_ReadOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShelfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShelfServiceServer).ReadOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elearning.ShelfService/ReadOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShelfServiceServer).ReadOne(ctx, req.(*ShelfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShelfService_ReadAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShelfServiceServer).ReadAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elearning.ShelfService/ReadAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShelfServiceServer).ReadAll(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShelfService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShelfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShelfServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elearning.ShelfService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShelfServiceServer).Update(ctx, req.(*ShelfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShelfService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShelfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShelfServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elearning.ShelfService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShelfServiceServer).Delete(ctx, req.(*ShelfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ShelfService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "elearning.ShelfService",
	HandlerType: (*ShelfServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ShelfService_Create_Handler,
		},
		{
			MethodName: "ReadOne",
			Handler:    _ShelfService_ReadOne_Handler,
		},
		{
			MethodName: "ReadAll",
			Handler:    _ShelfService_ReadAll_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ShelfService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ShelfService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "elearning.proto",
}

// SubjectServiceClient is the client API for SubjectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SubjectServiceClient interface {
	Create(ctx context.Context, in *SubjectRequest, opts ...grpc.CallOption) (*SubjectResponse, error)
	Update(ctx context.Context, in *SubjectRequest, opts ...grpc.CallOption) (*SubjectResponse, error)
	ReadOne(ctx context.Context, in *SubjectRequest, opts ...grpc.CallOption) (*SubjectResponse, error)
	ReadAll(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SubjectsResponse, error)
	Delete(ctx context.Context, in *SubjectRequest, opts ...grpc.CallOption) (*SubjectResponse, error)
}

type subjectServiceClient struct {
	cc *grpc.ClientConn
}

func NewSubjectServiceClient(cc *grpc.ClientConn) SubjectServiceClient {
	return &subjectServiceClient{cc}
}

func (c *subjectServiceClient) Create(ctx context.Context, in *SubjectRequest, opts ...grpc.CallOption) (*SubjectResponse, error) {
	out := new(SubjectResponse)
	err := c.cc.Invoke(ctx, "/elearning.SubjectService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subjectServiceClient) Update(ctx context.Context, in *SubjectRequest, opts ...grpc.CallOption) (*SubjectResponse, error) {
	out := new(SubjectResponse)
	err := c.cc.Invoke(ctx, "/elearning.SubjectService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subjectServiceClient) ReadOne(ctx context.Context, in *SubjectRequest, opts ...grpc.CallOption) (*SubjectResponse, error) {
	out := new(SubjectResponse)
	err := c.cc.Invoke(ctx, "/elearning.SubjectService/ReadOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subjectServiceClient) ReadAll(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SubjectsResponse, error) {
	out := new(SubjectsResponse)
	err := c.cc.Invoke(ctx, "/elearning.SubjectService/ReadAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subjectServiceClient) Delete(ctx context.Context, in *SubjectRequest, opts ...grpc.CallOption) (*SubjectResponse, error) {
	out := new(SubjectResponse)
	err := c.cc.Invoke(ctx, "/elearning.SubjectService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubjectServiceServer is the server API for SubjectService service.
type SubjectServiceServer interface {
	Create(context.Context, *SubjectRequest) (*SubjectResponse, error)
	Update(context.Context, *SubjectRequest) (*SubjectResponse, error)
	ReadOne(context.Context, *SubjectRequest) (*SubjectResponse, error)
	ReadAll(context.Context, *SearchRequest) (*SubjectsResponse, error)
	Delete(context.Context, *SubjectRequest) (*SubjectResponse, error)
}

func RegisterSubjectServiceServer(s *grpc.Server, srv SubjectServiceServer) {
	s.RegisterService(&_SubjectService_serviceDesc, srv)
}

func _SubjectService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubjectServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elearning.SubjectService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubjectServiceServer).Create(ctx, req.(*SubjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubjectService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubjectServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elearning.SubjectService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubjectServiceServer).Update(ctx, req.(*SubjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubjectService_ReadOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubjectServiceServer).ReadOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elearning.SubjectService/ReadOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubjectServiceServer).ReadOne(ctx, req.(*SubjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubjectService_ReadAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubjectServiceServer).ReadAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elearning.SubjectService/ReadAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubjectServiceServer).ReadAll(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubjectService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubjectServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elearning.SubjectService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubjectServiceServer).Delete(ctx, req.(*SubjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SubjectService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "elearning.SubjectService",
	HandlerType: (*SubjectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _SubjectService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _SubjectService_Update_Handler,
		},
		{
			MethodName: "ReadOne",
			Handler:    _SubjectService_ReadOne_Handler,
		},
		{
			MethodName: "ReadAll",
			Handler:    _SubjectService_ReadAll_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _SubjectService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "elearning.proto",
}

// HomeServiceClient is the client API for HomeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HomeServiceClient interface {
	ReadAll(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*ShelvesResponse, error)
}

type homeServiceClient struct {
	cc *grpc.ClientConn
}

func NewHomeServiceClient(cc *grpc.ClientConn) HomeServiceClient {
	return &homeServiceClient{cc}
}

func (c *homeServiceClient) ReadAll(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*ShelvesResponse, error) {
	out := new(ShelvesResponse)
	err := c.cc.Invoke(ctx, "/elearning.HomeService/ReadAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HomeServiceServer is the server API for HomeService service.
type HomeServiceServer interface {
	ReadAll(context.Context, *SearchRequest) (*ShelvesResponse, error)
}

func RegisterHomeServiceServer(s *grpc.Server, srv HomeServiceServer) {
	s.RegisterService(&_HomeService_serviceDesc, srv)
}

func _HomeService_ReadAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeServiceServer).ReadAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elearning.HomeService/ReadAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeServiceServer).ReadAll(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HomeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "elearning.HomeService",
	HandlerType: (*HomeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadAll",
			Handler:    _HomeService_ReadAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "elearning.proto",
}

// PreferenceServiceClient is the client API for PreferenceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PreferenceServiceClient interface {
	Update(ctx context.Context, in *PreferenceRequest, opts ...grpc.CallOption) (*PreferenceResponse, error)
}

type preferenceServiceClient struct {
	cc *grpc.ClientConn
}

func NewPreferenceServiceClient(cc *grpc.ClientConn) PreferenceServiceClient {
	return &preferenceServiceClient{cc}
}

func (c *preferenceServiceClient) Update(ctx context.Context, in *PreferenceRequest, opts ...grpc.CallOption) (*PreferenceResponse, error) {
	out := new(PreferenceResponse)
	err := c.cc.Invoke(ctx, "/elearning.PreferenceService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PreferenceServiceServer is the server API for PreferenceService service.
type PreferenceServiceServer interface {
	Update(context.Context, *PreferenceRequest) (*PreferenceResponse, error)
}

func RegisterPreferenceServiceServer(s *grpc.Server, srv PreferenceServiceServer) {
	s.RegisterService(&_PreferenceService_serviceDesc, srv)
}

func _PreferenceService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PreferenceServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elearning.PreferenceService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PreferenceServiceServer).Update(ctx, req.(*PreferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PreferenceService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "elearning.PreferenceService",
	HandlerType: (*PreferenceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Update",
			Handler:    _PreferenceService_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "elearning.proto",
}
