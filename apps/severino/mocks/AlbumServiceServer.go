// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import mock "github.com/stretchr/testify/mock"
import proto "backend/proto"

// AlbumServiceServer is an autogenerated mock type for the AlbumServiceServer type
type AlbumServiceServer struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *AlbumServiceServer) Create(_a0 context.Context, _a1 *proto.AlbumRequest) (*proto.AlbumResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *proto.AlbumResponse
	if rf, ok := ret.Get(0).(func(context.Context, *proto.AlbumRequest) *proto.AlbumResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.AlbumResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.AlbumRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *AlbumServiceServer) Delete(_a0 context.Context, _a1 *proto.AlbumRequest) (*proto.AlbumResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *proto.AlbumResponse
	if rf, ok := ret.Get(0).(func(context.Context, *proto.AlbumRequest) *proto.AlbumResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.AlbumResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.AlbumRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Publish provides a mock function with given fields: _a0, _a1
func (_m *AlbumServiceServer) Publish(_a0 context.Context, _a1 *proto.AlbumRequest) (*proto.AlbumResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *proto.AlbumResponse
	if rf, ok := ret.Get(0).(func(context.Context, *proto.AlbumRequest) *proto.AlbumResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.AlbumResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.AlbumRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadAll provides a mock function with given fields: _a0, _a1
func (_m *AlbumServiceServer) ReadAll(_a0 context.Context, _a1 *proto.SearchRequest) (*proto.AlbumsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *proto.AlbumsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *proto.SearchRequest) *proto.AlbumsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.AlbumsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.SearchRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadOne provides a mock function with given fields: _a0, _a1
func (_m *AlbumServiceServer) ReadOne(_a0 context.Context, _a1 *proto.AlbumRequest) (*proto.AlbumResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *proto.AlbumResponse
	if rf, ok := ret.Get(0).(func(context.Context, *proto.AlbumRequest) *proto.AlbumResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.AlbumResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.AlbumRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Unpublish provides a mock function with given fields: _a0, _a1
func (_m *AlbumServiceServer) Unpublish(_a0 context.Context, _a1 *proto.AlbumRequest) (*proto.AlbumResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *proto.AlbumResponse
	if rf, ok := ret.Get(0).(func(context.Context, *proto.AlbumRequest) *proto.AlbumResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.AlbumResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.AlbumRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *AlbumServiceServer) Update(_a0 context.Context, _a1 *proto.AlbumRequest) (*proto.AlbumResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *proto.AlbumResponse
	if rf, ok := ret.Get(0).(func(context.Context, *proto.AlbumRequest) *proto.AlbumResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.AlbumResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.AlbumRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
