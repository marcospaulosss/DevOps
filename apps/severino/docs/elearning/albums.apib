# Group Albums
## Albuns contendo seções e faixas [/api/albums]

### Create [POST]

+ Request (application/json)

    + Attributes (AlbumRequest)

+ Response 201 (application/json)

    + Attributes (AlbumIDResponse)

+ Response 400 (application/json)

    + Attributes (ResponseError)

+ Response 419 (application/json)

    + Attributes (ResponseError)

+ Response 500 (application/json)

    + Attributes(ResponseError)

### Update [PUT /api/albums/{id}]

+ Parameters
    + id: `1` (number, required) - ID do album

+ Request (application/json)

    + Attributes (AlbumRequest)

+ Response 200 (application/json)

    + Attributes (AlbumIDResponse)

+ Response 400 (application/json)

    + Attributes (ResponseError)

+ Response 404 (application/json)

    + Attributes (ResponseError)

+ Response 419 (application/json)

    + Attributes (ResponseError)

+ Response 500 (application/json)

    + Attributes(ResponseError)

### Delete [DELETE /api/albums/{id}]

+ Parameters
    + id: `1` (number, required) - ID do item

+ Response 204 (application/json)

+ Response 404 (application/json)

    + Attributes (ResponseError)

+ Response 500 (application/json)

    + Attributes (ResponseError)

### ReadOne [GET /api/albums/{id}]

+ Parameters
    + id: `1` (number, required) - ID do item

+ Response 200 (application/json)

    + Attributes (AlbumResponse)

+ Response 400 (application/json)

    + Attributes (ResponseError)

+ Response 404 (application/json)

    + Attributes (ResponseError)

+ Response 500 (application/json)

    + Attributes (ResponseError)

### ReadAll [GET /api/albums{?search,sort,page,per_page}]

O parametro 'search' segue o formato: "(field[operator]:'value')". Exemplos:

- **title[eq]:'first album'**: O campo `title` dever possuir o valor exatamente igual à `first album`
- **title[ne]:'first'**: O o valor do campo `title` deve ser diferente de `first`
- **title[contains]:'first'**: O campo `title` deve conter o valor `first`
- **title[icontains]:'first'**: O campo `title` deve conter o valor `first` ignorando case sensitive
- **created_at[gt]:'2019-01-01'**: O valor do campo `created_at` deve ser maior que `2019-01-01`
- **created_at[gte]:'2019-01-01'**: O valor do campo `created_at` deve ser maior ou igual que `2019-01-01`
- **created_at[lt]:'2019-01-01'**: O valor do campo `created_at` deve ser menor que `2019-01-01`
- **created_at[lte]:'2019-01-01'**: O valor do campo `created_at` deve ser menor ou igual que `2019-01-01`

+ Parameters

    + sort: `+created_at` (string, optional) - Ordena o resultado pelo campo determinado. A ordem varia entre ASC (adicionando o prefixo +) ou DESC (adicionando prefixo -).

        + Members
            + `+id`
            + `-id`
            + `+created_at`
            + `-created_at`
            + `+title`
            + `-title`

    + page: `1` (string, optional) - Número da página. Se for `0` a paginação vai ser ignorada.

    + per_page: `5` (number, optional) - Total de itens por página. Se for `0` a paginação vai ser ignorada.

    + search: `(created_at[gte]:'2019-01-01')` - Os parâmetros de busca devem estar entre parenteses. O separador `,` funciona como o operador `OR` e `+` como `AND`.

+ Request (application/json)

+ Response 200 (application/json)

    + Attributes(AlbumsResponse)

+ Response 500 (application/json)

    + Attributes(SearchResponseError)

+ Response 400 (application/json)

    + Attributes(SearchResponseError)

### ReadAll Published Only [GET /api/albums/published{?search,sort,page,per_page}]

Aceita os mesmos parametros de filtro do ReadAll.

+ Request (application/json)

+ Response 200 (application/json)

    + Attributes(AlbumsResponse)

+ Response 400 (application/json)

    + Attributes(SearchResponseError)

+ Response 500 (application/json)

    + Attributes(SearchResponseError)


### Publish [PUT /api/albums/publish/{id}]

+ Parameters
    + id: `1` (number, required) - ID do album

+ Request (application/json)

+ Response 204 (application/json)

+ Response 404 (application/json)

    + Attributes (ResponseError)

+ Response 500 (application/json)

    + Attributes(ResponseError)

### Unpublish [PUT /api/albums/unpublish/{id}]

+ Parameters
    + id: `1` (number, required) - ID do album

+ Request (application/json)

+ Response 204 (application/json)

+ Response 404 (application/json)

    + Attributes (ResponseError)

+ Response 500 (application/json)

    + Attributes(ResponseError)

## Data Structures

### `album_id`
+ id: 1 (number, required) - ID do item

### album
+ title: `Regência verbal e nominal` (string, required) - Título
+ description: `Noções de português` (string, optional) - Descrição

### albumfull(album)
+ id: 1 (number, required) - ID do item
+ created_at: `2019-03-03 03:03:03` (string, required) - Data de criação
+ updated_at: `2019-03-03 03:03:03` (string, optional) - Data de alteração
+ published_at: `2019-03-03 03:03:03` (string, optional) - Data da publicação
+ is_published: `true` (boolean, required) - Define se o album está publicado. O default é `true`
+ teachers: roberto,ana (array[string], required) - Professores que possuem tracks que fazem parte do album
+ image: `https://d3oc8874xjg8az.cloudfront.net/024DD405-6710-4193-2B7F-E62FCD82D3F/2024DD405-6710-4193-2B7F-E62FCD82D3F2.jpeg` (string, required) - Nome do arquivo armazenado no S3 para capa

### `album_with_sections` (albumfull)
+ sections (array[section], required) - Seções contendo as tracks

### section
+ title: `Capítulo 1` (string, required)
+ description: `Introdução` (string, optional)
+ tracks (array[track_id], required)

### AlbumRequest(album)
+ image: `024DD405-6710-4193-2B7F-E62FCD82D3F2.jpeg` (string, required) - Nome do arquivo armazenado no S3 para capa
+ sections (array[section], required) - Seções contendo as tracks

### AlbumIDResponse
+ data (album_id, required)

### AlbumResponse(albumfull)

### AlbumsResponse
+ data (array[album_with_sections], required)
+ meta (meta) - Metadados da paginação

